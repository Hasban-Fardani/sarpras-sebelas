openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost:8000'
paths:
  /dashboard/counts:
    get:
      summary: ''
      operationId: getDashboardCounts
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'Admin Dashboard'
      security: []
  /dashboard/stats/request:
    get:
      summary: ''
      operationId: getDashboardStatsRequest
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'Admin Dashboard'
      security: []
  /dashboard/stats/item:
    get:
      summary: ''
      operationId: getDashboardStatsItem
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'Admin Dashboard'
      security: []
  /auth/login:
    post:
      summary: 'Login endpoint'
      operationId: loginEndpoint
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: ''
                  example: password123
                id:
                  type: string
                  description: ''
                  example: '2121021210'
              required:
                - password
                - id
      security: []
  /auth/logout:
    post:
      summary: ''
      operationId: postAuthLogout
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
      security: []
  /category:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'Category Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Category Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must contain only letters, numbers, dashes and underscores.'
                  example: zwr-mxj_k
              required:
                - name
      security: []
  '/category/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'Category Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Category Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: eos
              required:
                - name
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Category Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the category.'
        example: ATK
        required: true
        schema:
          type: string
  /employees:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'Employee Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Employee Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: validation.max.
                  example: bmckqtmariyokhnihmjbvkk
                name:
                  type: string
                  description: ''
                  example: explicabo
                position:
                  type: string
                  description: ''
                  example: omnis
                phone:
                  type: string
                  description: ''
                  example: ipsa
                email:
                  type: string
                  description: ''
                  example: hadley.abernathy@example.net
              required:
                - name
                - position
                - phone
                - email
      security: []
  '/employees/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'Employee Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Employee Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: validation.max.
                  example: kukxmvfvbexbmklvxchgxnsex
                name:
                  type: string
                  description: ''
                  example: excepturi
                position:
                  type: string
                  description: ''
                  example: labore
                phone:
                  type: string
                  description: ''
                  example: tenetur
                email:
                  type: string
                  description: ''
                  example: theo14@example.com
              required:
                - name
                - position
                - phone
                - email
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Employee Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the employee.'
        example: 197412311994031001
        required: true
        schema:
          type: integer
  /sanctum/csrf-cookie:
    get:
      summary: 'Return an empty response simply to trigger the storage of the CSRF cookie in the browser.'
      operationId: returnAnEmptyResponseSimplyToTriggerTheStorageOfTheCSRFCookieInTheBrowser
      description: ''
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - Endpoints
      security: []
  /:
    get:
      summary: ''
      operationId: get
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'hello, please visit /docs for documentation'
                  docs: 'http://localhost:8000/docs'
                properties:
                  message:
                    type: string
                    example: 'hello, please visit /docs for documentation'
                  docs:
                    type: string
                    example: 'http://localhost:8000/docs'
      tags:
        - Endpoints
      security: []
  /auth/check:
    get:
      summary: ''
      operationId: getAuthCheck
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - Endpoints
      security: []
  '/public/{path}':
    get:
      summary: ''
      operationId: getPublicPath
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Found'
                properties:
                  message:
                    type: string
                    example: 'Not Found'
      tags:
        - 'File Management'
      security: []
    parameters:
      -
        in: path
        name: path
        description: ''
        example: 'P:K/Ec'
        required: true
        schema:
          type: string
  '/private/{path}':
    get:
      summary: ''
      operationId: getPrivatePath
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'File Management'
      security: []
    parameters:
      -
        in: path
        name: path
        description: ''
        example: (WI
        required: true
        schema:
          type: string
  '/incoming-item/{incoming_item_id}/detail':
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'Incoming Item Detail Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Incoming Item Detail Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item_id:
                  type: integer
                  description: ''
                  example: 9
                qty:
                  type: integer
                  description: ''
                  example: 17
              required:
                - item_id
                - qty
      security: []
    parameters:
      -
        in: path
        name: incoming_item_id
        description: 'The ID of the incoming item.'
        example: INV-001
        required: true
        schema:
          type: string
  '/incoming-item/{incoming_item_id}/detail/{id}':
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Incoming Item Detail Management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                item_id:
                  type: integer
                  description: ''
                  example: 10
                qty:
                  type: integer
                  description: ''
                  example: 18
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Incoming Item Detail Management'
      security: []
    parameters:
      -
        in: path
        name: incoming_item_id
        description: 'The ID of the incoming item.'
        example: INV-001
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the detail.'
        example: INV-001
        required: true
        schema:
          type: string
  /incoming-item:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'Incoming Item Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Incoming Item Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                supplier_id:
                  type: string
                  description: ''
                  example: ut
                items:
                  type: array
                  description: ''
                  example:
                    - []
                  items:
                    type: object
                    properties:
                      item_id:
                        type: string
                        description: ''
                        example: omnis
                      qty:
                        type: integer
                        description: ''
                        example: 16
                    required:
                      - item_id
                      - qty
              required:
                - supplier_id
                - items
      security: []
  '/incoming-item/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'Incoming Item Management'
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Incoming Item Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the incoming item.'
        example: INV-001
        required: true
        schema:
          type: string
  /item:
    get:
      summary: 'Display list item with pagination'
      operationId: displayListItemWithPagination
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'Item Management'
      security: []
    post:
      summary: 'Store a newly item in storage.'
      operationId: storeANewlyItemInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Item Management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: 'Must be a file.'
                name:
                  type: string
                  description: validation.max.
                  example: zjuaslwqkegwakvoxx
                unit:
                  type: string
                  description: validation.max.
                  example: vy
                stock:
                  type: integer
                  description: ''
                  example: 5
                min_stock:
                  type: integer
                  description: ''
                  example: 14
                category_id:
                  type: string
                  description: ''
                  example: quam
                price:
                  type: integer
                  description: ''
                  example: 2
              required:
                - name
                - unit
                - stock
                - min_stock
                - category_id
                - price
      security: []
  '/item/{id}':
    get:
      summary: 'Display the specified item.'
      operationId: displayTheSpecifiedItem
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'Item Management'
      security: []
    put:
      summary: 'Update the specified item in storage.'
      operationId: updateTheSpecifiedItemInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Item Management'
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: 'Must be a file.'
                name:
                  type: string
                  description: validation.max.
                  example: wafcfouctk
                unit:
                  type: string
                  description: validation.max.
                  example: gysxd
                stock:
                  type: integer
                  description: ''
                  example: 5
                min_stock:
                  type: integer
                  description: ''
                  example: 9
                category_id:
                  type: string
                  description: ''
                  example: in
                price:
                  type: integer
                  description: ''
                  example: 4
      security: []
    delete:
      summary: 'Remove the specified item from storage.'
      operationId: removeTheSpecifiedItemFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Item Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the item.'
        example: I-001
        required: true
        schema:
          type: string
  '/outgoing-item/{outgoing_item_id}/detail':
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'Outgoing Item Detail'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Outgoing Item Detail'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item_id:
                  type: integer
                  description: ''
                  example: 17
                qty:
                  type: integer
                  description: ''
                  example: 1
              required:
                - item_id
                - qty
      security: []
    parameters:
      -
        in: path
        name: outgoing_item_id
        description: 'The ID of the outgoing item.'
        example: OTK-001
        required: true
        schema:
          type: string
  '/outgoing-item/{outgoing_item_id}/detail/{id}':
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Outgoing Item Detail'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                item_id:
                  type: integer
                  description: ''
                  example: 1
                qty:
                  type: integer
                  description: ''
                  example: 9
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Outgoing Item Detail'
      security: []
    parameters:
      -
        in: path
        name: outgoing_item_id
        description: 'The ID of the outgoing item.'
        example: OTK-001
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the detail.'
        example: sapiente
        required: true
        schema:
          type: string
  /outgoing-item:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'Outgoing Item Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Outgoing Item Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                division_id:
                  type: integer
                  description: ''
                  example: 16
                items:
                  type: array
                  description: ''
                  example:
                    - []
                  items:
                    type: object
                    properties:
                      item_id:
                        type: integer
                        description: ''
                        example: 19
                      qty:
                        type: integer
                        description: ''
                        example: 12
                    required:
                      - item_id
                      - qty
              required:
                - division_id
                - items
      security: []
  '/outgoing-item/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'Outgoing Item Management'
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Outgoing Item Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the outgoing item.'
        example: OTK-001
        required: true
        schema:
          type: string
  '/request-item/{request_item_id}/detail':
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'Request Item Detail Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Request Item Detail Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item_id:
                  type: string
                  description: ''
                  example: unde
                qty:
                  type: string
                  description: ''
                  example: voluptatem
              required:
                - item_id
                - qty
      security: []
    parameters:
      -
        in: path
        name: request_item_id
        description: 'The ID of the request item.'
        example: RQ-001
        required: true
        schema:
          type: string
  '/request-item/{request_item_id}/detail/{requestItemDetail}':
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Request Item Detail Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item_id:
                  type: integer
                  description: ''
                  example: 4
                qty:
                  type: integer
                  description: ''
                  example: 17
                qty_acc:
                  type: integer
                  description: ''
                  example: 6
              required:
                - item_id
                - qty
                - qty_acc
      security: []
    parameters:
      -
        in: path
        name: request_item_id
        description: 'The ID of the request item.'
        example: RQ-001
        required: true
        schema:
          type: string
      -
        in: path
        name: requestItemDetail
        description: ''
        example: nisi
        required: true
        schema:
          type: string
  '/request-item/{request_item_id}/detail/{requestItemDetail_id}':
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Request Item Detail Management'
      security: []
    parameters:
      -
        in: path
        name: request_item_id
        description: 'The ID of the request item.'
        example: RQ-001
        required: true
        schema:
          type: string
      -
        in: path
        name: requestItemDetail_id
        description: 'The ID of the requestItemDetail.'
        example: in
        required: true
        schema:
          type: string
  /request-item:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'Request Item Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Request Item Management'
      security: []
  '/request-item/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'Request Item Management'
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Request Item Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the request item.'
        example: RQ-001
        required: true
        schema:
          type: string
  '/submission/{submission_id}/detail':
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'Submission Item Detail Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Submission Item Detail Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item_id:
                  type: string
                  description: ''
                  example: voluptate
                qty:
                  type: string
                  description: ''
                  example: quas
              required:
                - item_id
                - qty
      security: []
    parameters:
      -
        in: path
        name: submission_id
        description: 'The ID of the submission.'
        example: SM-001
        required: true
        schema:
          type: string
  '/submission/{submission_id}/detail/{id}':
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Submission Item Detail Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item_id:
                  type: integer
                  description: ''
                  example: 4
                qty:
                  type: integer
                  description: ''
                  example: 18
                qty_acc:
                  type: integer
                  description: ''
                  example: 1
              required:
                - item_id
                - qty
                - qty_acc
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Submission Item Detail Management'
      security: []
    parameters:
      -
        in: path
        name: submission_id
        description: 'The ID of the submission.'
        example: SM-001
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the detail.'
        example: molestiae
        required: true
        schema:
          type: string
  /submission:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'Submission Item Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Submission Item Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  description: ''
                  example:
                    - []
                  items:
                    type: object
                    properties:
                      item_id:
                        type: integer
                        description: ''
                        example: 11
                      qty:
                        type: integer
                        description: ''
                        example: 10
                    required:
                      - item_id
                      - qty
              required:
                - items
      security: []
  '/submission/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'Submission Item Management'
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Submission Item Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the submission.'
        example: SM-001
        required: true
        schema:
          type: string
  '/request/{request}/accept':
    post:
      summary: ''
      operationId: postRequestRequestAccept
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Supervisor - Request Check'
      security: []
    parameters:
      -
        in: path
        name: request
        description: 'The request.'
        example: et
        required: true
        schema:
          type: string
  '/request/{request}/decline':
    post:
      summary: ''
      operationId: postRequestRequestDecline
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Supervisor - Request Check'
      security: []
    parameters:
      -
        in: path
        name: request
        description: 'The request.'
        example: eveniet
        required: true
        schema:
          type: string
  '/submission/{submission_id}/accept':
    post:
      summary: ''
      operationId: postSubmissionSubmission_idAccept
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Supervisor - Submission Check'
      security: []
    parameters:
      -
        in: path
        name: submission_id
        description: 'The ID of the submission.'
        example: SM-001
        required: true
        schema:
          type: string
  '/submission/{submission_id}/decline':
    post:
      summary: ''
      operationId: postSubmissionSubmission_idDecline
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Supervisor - Submission Check'
      security: []
    parameters:
      -
        in: path
        name: submission_id
        description: 'The ID of the submission.'
        example: SM-001
        required: true
        schema:
          type: string
  /supplier:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'Supplier Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Supplier Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: validation.max.
                  example: duahfyknyn
                address:
                  type: string
                  description: validation.max.
                  example: bmmgnfolegbbqovojekqxv
                phone:
                  type: string
                  description: validation.max.
                  example: uwfgj
              required:
                - name
      security: []
  '/supplier/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'Supplier Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Supplier Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: validation.max.
                  example: ilyvkhrhwy
                address:
                  type: string
                  description: validation.max.
                  example: ujsiskhrigeealbcwlrcwyafg
                phone:
                  type: string
                  description: validation.max.
                  example: fxkejjxdcepcwnoslyamvxnfv
              required:
                - name
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Supplier Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the supplier.'
        example: S0001
        required: true
        schema:
          type: string
  /users:
    get:
      summary: 'Display a listing of the resource.'
      operationId: displayAListingOfTheResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'User Management'
      security: []
    post:
      summary: 'Store a newly created resource in storage.'
      operationId: storeANewlyCreatedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: validation.max.
                  example: xejjumpknulyffarpldo
                id:
                  type: string
                  description: validation.max.
                  example: xysknptxyyexfgxz
                username:
                  type: string
                  description: validation.max.
                  example: b
                email:
                  type: string
                  description: 'validation.email validation.max.'
                  example: lveum@example.org
                password:
                  type: string
                  description: validation.min.
                  example: psWO)oLzFX->UaU
                role:
                  type: string
                  description: ''
                  example: pengawas
                  enum:
                    - admin
                    - unit
                    - pengawas
              required:
                - name
                - id
                - username
                - email
                - password
                - role
      security: []
  '/users/{username}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not Authorized'
                properties:
                  message:
                    type: string
                    example: 'Not Authorized'
      tags:
        - 'User Management'
      security: []
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: validation.max.
                  example: sstvfzxgabxvnxqciorww
                id:
                  type: string
                  description: validation.max.
                  example: imootdxdeabyl
                username:
                  type: string
                  description: validation.max.
                  example: gzdgzmgtezxpneabeznuv
                email:
                  type: string
                  description: 'validation.email validation.max.'
                  example: kvandervort@example.com
                password:
                  type: string
                  description: validation.min.
                  example: 'Dj!aY*Lz0%e9b?BVjWe'
                role:
                  type: string
                  description: ''
                  example: admin
                  enum:
                    - admin
                    - unit
                    - pengawas
              required:
                - name
                - id
                - username
                - email
                - password
                - role
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User Management'
      security: []
    parameters:
      -
        in: path
        name: username
        description: ''
        example: pengawas
        required: true
        schema:
          type: string
tags:
  -
    name: 'Admin Dashboard'
    description: "\nAPI endpoints for admin dashboard"
  -
    name: Auth
    description: "\nAPI endpoints for login"
  -
    name: 'Category Management'
    description: "\nAPI endpoints for managing categories"
  -
    name: 'Employee Management'
    description: "\nAPI endpoints for managing employees"
  -
    name: Endpoints
    description: ''
  -
    name: 'File Management'
    description: "\nAPI endpoints for get files from R2"
  -
    name: 'Incoming Item Detail Management'
    description: "\nAPI endpoints for managing Incoming Item Detail"
  -
    name: 'Incoming Item Management'
    description: "\nAPI endpoints for managing incoming item"
  -
    name: 'Item Management'
    description: "\nAPI endpoints for managing items"
  -
    name: 'Outgoing Item Detail'
    description: "\nManage outgoing item detail"
  -
    name: 'Outgoing Item Management'
    description: "\nAPI endpoints for managing outgoing item"
  -
    name: 'Request Item Detail Management'
    description: "\nAPI endpoints for managing request item detail"
  -
    name: 'Request Item Management'
    description: "\nAPI endpoints for managing request item"
  -
    name: 'Submission Item Detail Management'
    description: "\nAPI endpoints for managing submission item detail"
  -
    name: 'Submission Item Management'
    description: "\nAPI endpoints for managing submission item"
  -
    name: 'Supervisor - Request Check'
    description: "\nAPI endpoints for request check"
  -
    name: 'Supervisor - Submission Check'
    description: "\nAPI endpoints for submission check"
  -
    name: 'Supplier Management'
    description: "\nAPI endpoints for managing suppliers"
  -
    name: 'User Management'
    description: "\nAPI endpoints for managing users"
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: 'You can retrieve your token by visiting your dashboard and clicking <b>Generate API token</b>.'
security:
  -
    default: []
